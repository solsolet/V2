#include "entity.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void 
Entity::addTags (Tag const ts) noexcept {
   tags_ |= ts;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
bool
Entity::hasTags (Tag const ts) const noexcept {
   return (tags_ & ts) == ts;
}
   
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void
Entity::removeTags (Tag const ts) noexcept {
   tags_ &= (~ts);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void 
Entity::addComponent(std::unique_ptr<RenderComponent> cmp) { 
   ren = std::move(cmp);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void 
Entity::addComponent(std::unique_ptr<PhysicsComponent> cmp) {
   components[PhysicsComponent::getType()] = std::move(cmp);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void 
Entity::addComponent(std::unique_ptr<InputComponent> cmp) {
   components[InputComponent::getType()] = std::move(cmp);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void 
Entity::addComponent(std::unique_ptr<AIComponent> cmp) {
   components[AIComponent::getType()] = std::move(cmp);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
RenderComponent const*
Entity::getComponent(RenderComponent) const noexcept { 
   return ren.get(); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
RenderComponent*
Entity::getComponent(RenderComponent) noexcept { 
   return ren.get(); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
InputComponent*
Entity::getComponent(InputComponent) noexcept { 
   auto const pid = InputComponent::getType();
   if (components.contains(pid)) 
      return static_cast<InputComponent*>(components[pid].get());
   return nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
InputComponent const*
Entity::getComponent(InputComponent) const noexcept { 
   auto const pid = InputComponent::getType();
   if (components.contains(pid)) 
      return static_cast<InputComponent*>(components.at(pid).get());
   return nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
PhysicsComponent*
Entity::getComponent(PhysicsComponent) noexcept { 
   auto const pid = PhysicsComponent::getType();
   if (components.contains(pid)) 
      return static_cast<PhysicsComponent*>(components[pid].get());
   return nullptr;
}
 
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
PhysicsComponent const*
Entity::getComponent(PhysicsComponent) const noexcept { 
   auto const pid = PhysicsComponent::getType();
   if (components.contains(pid)) 
      return static_cast<PhysicsComponent*>(components.at(pid).get());
   return nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
AIComponent*
Entity::getComponent(AIComponent) noexcept { 
   auto const pid = AIComponent::getType();
   if (components.contains(pid)) 
      return static_cast<AIComponent*>(components[pid].get());
   return nullptr;
}
 
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
AIComponent const*
Entity::getComponent(AIComponent) const noexcept { 
   auto const pid = AIComponent::getType();
   if (components.contains(pid)) 
      return static_cast<AIComponent*>(components.at(pid).get());
   return nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void 
Entity::update(EntityManager& EM) {
   for( auto& [_, c] : components ) {
      c->update(EM, *this); 
   }
}