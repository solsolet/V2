#include "physicscomponent.hpp"
#include <entity.hpp>
#include <algorithm>

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
void 
PhysicsComponent::manage_input(Entity& e) {
   // Check if entity has inputcomponent and manage
   if( auto* inp = e.getComponent( InputComponent({}) ) ) {
      auto& D = data;
      auto& I = inp->data;
      
      D.vx = (I.left * -D.max_vx) + (I.right * D.max_vx);
      D.vy = (I.up   * -D.max_vy) + (I.down  * D.max_vy);
   }
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
void 
PhysicsComponent::update(EntityManager&, Entity& e) {
   manage_input(e);

   data.x += data.vx;
   data.y += data.vy;
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
void
PhysicsComponent::setVelocity(float const svx, float const svy, float const mrelx, float const mrely) noexcept {
   setVelocityX(svx, mrelx);
   setVelocityY(svy, mrely);
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
void
PhysicsComponent::setVelocityX(float const svx, float const max_relative) noexcept {
   auto const relative = std::clamp(max_relative, 0.0f, 1.0f);
   data.vx = relative * std::clamp(svx, -data.max_vx, data.max_vx);
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
void
PhysicsComponent::setVelocityY(float const svy, float const max_relative) noexcept {
   auto const relative = std::clamp(max_relative, 0.0f, 1.0f);
   data.vy = relative * std::clamp(svy, -data.max_vy, data.max_vy);
}
